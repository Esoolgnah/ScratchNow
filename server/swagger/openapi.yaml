openapi: 3.0.3
info:
  title: ScratchNow API
  description: ScratchNow API Swagger Document
  version: 1.0.0

externalDocs:
  description: Github Repository
  url: https://github.com/codestates/ScratchNow

servers:
  - url: http://localhost:3300
  - url: 13.124.208.89:3300

tags:
  - name: user
    description: 사용자 계정 API
  - name: post
    description: 게시물 API
  - name: feed
    description: 피드 API
  - name: comment
    description: 댓글 API
  - name: like
    description: 좋아요 API

paths:
  /api/user:
    post:
      tags:
        - user
      summary: 회원가입
      description: 서비스 자체 회원가입(이메일)
      requestBody:
        description: 회원정보 생성
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpRes'
        '403':
          description: Email already exists
    get:
      tags:
        - user
      summary: 사용자 계정 정보 조회
      parameters:
        - name: id
          in: query
          description: 사용자 id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: get user information success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserInfoRes'
    patch:
      tags:
        - user
      summary: 회원정보 수정(프로필 이미지, 닉네임, 상태메시지)
      requestBody:
        description: 로그인
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserInfo'
      responses:
        '200':
          description: Update user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserInfoRes'
        '401':
          description: Invalid Token
    delete:
      tags:
        - user
      summary: 회원탈퇴
      parameters:
        - name: id
          in: query
          description: 사용자 id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: withdrawal success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WithdrawRes'
        '401':
          description: Invalid Token
  /api/user/login:
    post:
      tags:
        - user
      summary: 이메일 로그인
      description: email login
      operationId: loginUser
      requestBody:
        description: 로그인
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        '200':
          description: login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInRes'
        '400':
          description: Email is registered with OAuth
        '403':
          description: Wrong password
        '404':
          description: No user data with email
  /api/user/logout:
    get:
      tags:
        - user
      summary: 로그아웃
      description: 쿠키 삭제
      operationId: logoutUser
      responses:
        '200':
          description: Logout success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutRes'
  /api/user/emailcheck:
    post:
      tags:
        - user
      summary: 이메일 인증번호 발송
      description: 이메일 인증번호 메일 발송
      requestBody:
        description: 이메일 인증 요청
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailAuthentication'
      responses:
        '200':
          description: Email authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAuthenticationRes'
#   /api//user/kakao/login:
#     post:
#       tags:
#         - user
#       summary: 카카오 소셜로그인
#       description: Kakao OAuth
#       operationId:
#       requestBody:
#         description: 카카오 소셜로그인
#         content:
#           application/json:
#             schema:
# #              $ref: '#/components/schemas/Kakao'
#       responses:
#   /api//user/google/login:
#     post:
#       tags:
#         - user
#       summary: Update user
#       description: This can only be done by the logged in user.
#       operationId: updateUser
#       requestBody:
#         description: 구글 소셜로그인
#         content:
#           application/json:
#             schema:
# #              $ref: '#/components/schemas/Google'
#       responses:
  /api/user/profileimagenull:
    patch:
      tags:
        - user
      summary: 프로필 이미지 기본으로 변경
      requestBody:
        description: 회원 id 전송
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProfileImage'
      responses:
        '200':
          description: 프로필 이미지 기본으로 변경
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProfileImageRes'
        '401':
          description: Invalid Token
  /api/user/nicknamecheck:
    get:
      tags:
        - user
      summary: 닉네임 중복 여부 확인
      parameters:
        - name: nickname
          in: query
          description: 중복확인 대상 닉네임
          required: true
          schema:
            type: string
      responses:
        '202':
          description: 중복 여부 결과
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NicknameCheckRes'
        '200':
          description: Nickname already exists
  /api/user/password:
    patch:
      tags:
        - user
      summary: 비밀번호 변경
      requestBody:
        description: 비밀번호 변경 요청
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
      responses:
        '200':
          description: 비밀번호 변경 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePasswordRes'
        '401':
          description: Invalid Token
  /api/post:
    get:
      tags:
        - post
      summary: 게시물 상세 조회
      parameters:
        - name: id
          in: query
          description: 게시물 id
          required: true
          schema:
            type: number
      responses:
        '200':
          description: 게시물 상세 조회
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostRes'
        '404':
          description: Invalid Post id
    post:
      tags:
        - post
      summary: 게시물 등록
      requestBody:
        description: 게시물 등록 요청
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '201':
          description: 게시물 생성
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePostRes'
    patch:
      tags:
        - post
      summary: 게시물 수정
      requestBody:
        description: 게시물 수정 요청
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
      responses:
        '200':
          description: 게시물 수정 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePostRes'
        '401':
          description: Invalid Token
        '404':
          description: Invalid Post id
    delete:
      tags:
        - post
      summary: 게시물 삭제
      parameters:
        - name: id
          in: query
          description: 게시물 id
          required: true
          schema:
            type: number
      responses:
        '200':
          description: 게시물 삭제 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePostRes'
        '401':
          description: Invalid Token
  /api/feed/date:
    get:
      tags:
        - feed
      summary: 최신순 피드 조회
      responses:
        '200':
          description: 최신순 정렬 피드
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedDateRes'
  /api/feed/likes:
    get:
      tags:
        - feed
      summary: 인기순 피드 조회
      responses:
        '200':
          description: 인기순 정렬 피드
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedLikesRes'
  /api/feed/user:
    get:
      tags:
        - feed
      summary: 유저 피드 조회
      parameters:
        - name: id
          in: query
          description: 사용자 id
          required: true
          schema:
            type: number
      responses:
        '200':
          description: 개별 사용자 피드
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedUserRes'
  /api/comment:
    post:
      tags:
        - comment
      summary: 댓글 등록
      requestBody:
        description: 댓글 등록
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
      responses:
        '201':
          description: 댓글 등록 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommentRes'
        '401':
          description: Invalid Token
        '404':
          description: Invalid Comment id
        '500':
          description: Failed to create comment
    get:
      tags:
        - comment
      summary: 댓글 조회
      parameters:
        - name: id
          in: query
          description: 게시물 id
          required: true
          schema:
            type: number
      responses:
        '200':
          description: 해당 게시물의 댓글 조회(예시에서 대댓글 id 5번만 탈퇴하지 않은 사용자)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentRes'
        '500':
          description: Failed providing comments
    patch:
      tags:
        - comment
      summary: 댓글 수정
      requestBody:
        description: 댓글 수정 요청
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateComment'
      responses:
        '200':
          description: 댓글 수정 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCommentRes'
        '401':
          description: Invalid Token
        '500':
          description: Failed to modify comment
    delete:
      tags:
        - comment
      summary: 댓글 삭제
      parameters:
        - name: id
          in: query
          description: 댓글 id
          required: true
          schema:
            type: number
      responses:
        '200':
          description: 댓글 삭제 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCommentRes'
        '401':
          description: Invalid Token
        '404':
          description: Invalid Comment id
        '500':
          description: Failed to delete the comment
  /api/like:
    post:
      tags:
        - like
      summary: 좋아요 추가 또는 취소
      requestBody:
        description: 좋아요 추가 또는 취소 요청
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeOrNot'
      responses:
        '200':
          description: 좋아요 추가 또는 취소 완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeOrNotRes'
        '404':
          description: Wrong id number requested

components:
  schemas:
    SignUp:
      type: object
      properties:
        email:
          type: string
          example: scratch2022@gmail.com
        password:
          type: string
          example: 'test'
        nickname:
          type: string
          example: 'scratchnow'
    SignUpRes:
      type: object
      properties:
        message:
          type: string
          example: 'Created the user scratchnow'
    GetUserInfoRes:
      type: object
      properties:
        data:
          type: object
          example: {
            "userData": {
              "id": 1,
              "nickname": "test093001",
              "profile_image_url": null,
              "status_message": null
            },
            "postCount": 0
          }
        message:
          type: string
          example: 'User information of the user 1'
    SignIn:
      type: object
      properties:
        email:
          type: string
          example: scratch2022@gmail.com
        password:
          type: string
          example: 'test'
    SignInRes:
      type: object
      properties:
        data:
          type: string
          example: {
            "accessToken": 'eyJhbGciOiJIUzI2MiIsInQ9cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWvfOiJ0ZXN0XAkzMDAxQGdtYWlsLmNvbSIsIm5pY2tuYW1lIjoidGVzdDA5MzAwMSIsImlhdCI6MTY2NDUzODUyNSwiZXhwIjoxNjY0NTYwMTI1fQ.swJBBFKwQ7xzvjtrXsdDMhBj7kQQPjCNlZtF6yfruYo'
          }
        message:
          type: string
          example: 'Login success with email: scratch2022@gmail.com'
    UpdateUserInfo:
      type: object
      properties:
        id:
          type: number
          example: 1
        profile_image_url:
          type: string
          example: 'url'
        nickname:
          type: string
          example: 'scratchnow'
        status_message:
          type: string
          example: 'status message of user scratchnow'
    UpdateUserInfoRes:
      type: object
      properties:
        message:
          type: string
          example: 'Updated user information of user 1'
    WithdrawRes:
      type: object
      properties:
        message:
          type: string
          example: 'Soft deleted the account 1'
    LogoutRes:
      type: object
      properties:
        message:
          type: string
          example: 'Logout success'
    EmailAuthentication:
      type: object
      properties:
        email:
          type: string
          example: sampleuser2022@gmail.com
    EmailAuthenticationRes:
      type: object
      properties:
        authNumber:
          type: number
          example: 123456
        message:
          type: string
          example: 'Authentication mail is sent to sampleuser2022@gmail.com'
    DeleteProfileImage:
      type: object
      properties:
        user_id:
          type: number
          example: 1
    DeleteProfileImageRes:
      type: object
      properties:
        message:
          type: string
          example: 'Deleted the profile image of user 1'
    NicknameCheckRes:
      type: object
      properties:
        message:
          type: string
          example: 'Nickname [ ] is available'
    UpdatePassword:
      type: object
      properties:
        user_id:
          type: number
          example: 1
        password:
          type: string
          example: 'newpassword'
    UpdatePasswordRes:
      type: object
      properties:
        message:
          type: string
          example: 'Changed the password of user 1'
    GetPostRes:
      type: object
      properties:
        postData:
          type: object
          example: {
            "id": 1,
            "painting_url": 'painting_url',
            "text": "texts",
            "user_id": 1,
            "total_likes": 0,
            "created_at": "2022-10-01T10:09:27.000Z",
            "updated_at": "2022-10-01T10:09:27.000Z",
            "deleted_at": null,
            "userHasManyPosts": {
              "id": 3,
              "nickname": "sampleuser",
              "profile_image_url": 'image_url'
            }
          }
        message:
          type: string
          example: 'Created the post'
    CreatePost:
      type: object
      properties:
        painting_url:
          type: string
          example: 'painting_url'
        text:
          type: string
          example: 'post text'
        user_id:
          type: number
          example: 1
    CreatePostRes:
      type: object
      properties:
        message:
          type: string
          example: 'Changed the password of user 1'
    UpdatePost:
      type: object
      properties:
        post_id:
          type: number
          example: 1
        painting_url:
          type: string
          example: 'painting_url'
        text:
          type: string
          example: 'Modify post text'
    UpdatePostRes:
      type: object
      properties:
        message:
          type: string
          example: 'Modified the post 1'
    DeletePostRes:
      type: object
      properties:
        message:
          type: string
          example: 'Soft deleted the post 1'
    FeedDateRes:
      type: object
      properties:
        feedData:
          type: object
          example: [
            {
              "id": 3,
              "painting_url": "painting_url",
              "user_id": 3,
              "total_likes": 0,
              "created_at": "2022-10-01T10:14:03.000Z",
              "userHasManyPosts": {
                "id": 3,
                "nickname": "sampleuser3",
                "profile_image_url": 'image_url'
              }
            }
          ]
        message:
          type: string
          example: 'All posts of our service listed by date'
    FeedLikesRes:
      type: object
      properties:
        feedData:
          type: object
          example: [
            {
              "id": 3,
              "painting_url": "painting_url",
              "user_id": 3,
              "total_likes": 0,
              "created_at": "2022-10-01T10:14:03.000Z",
              "userHasManyPosts": {
                "id": 3,
                "nickname": "sampleuser3",
                "profile_image_url": 'image_url'
              }
            }
          ]
        message:
          type: string
          example: 'All posts of our service listed by likes'
    FeedUserRes:
      type: object
      properties:
        feedData:
          type: object
          example: [
            {
              "id": 6,
              "painting_url": "painting_url_1001_1",
              "total_likes": 0,
              "created_at": "2022-10-01T11:38:55.000Z"
            },
            {
              "id": 5,
              "painting_url": "painting_url_1001_1",
              "total_likes": 0,
              "created_at": "2022-10-01T11:38:54.000Z"
            },
            {
              "id": 4,
              "painting_url": "painting_url_1001_1",
              "total_likes": 0,
              "created_at": "2022-10-01T11:38:53.000Z"
            }
          ]
        message:
          type: string
          example: 'Feed(posts) of user 1'
    CreateComment:
      type: object
      properties:
        user_id:
          type: number
          example: 1
        post_id:
          type: number
          example: 2
        text:
          type: string
          example: 'sample comment'
        anonymity_yn:
          type: string
          example: 'y'
        original_comment_id:
          type: number
          example: null
    CreateCommentRes:
      type: object
      properties:
        data:
          type: object
          example: {
            "id": 1,
            "user_id": 1,
            "post_id": 1,
            "anonymity_yn": "y",
            "text": "comment 저장 테스트 1001 익명",
            "original_comment_id": null,
            "updated_at": "2022-10-01T11:24:54.728Z",
            "created_at": "2022-10-01T11:24:54.728Z"
          }
        message:
          type: string
          example: 'Created the comment'
    GetCommentRes:
      type: object
      properties:
        data:
          type: object
          example: [
            {
              "id": 2,
              "user_id": 1,
              "post_id": 1,
              "original_comment_id": null,
              "anonymity_yn": "n",
              "text": "modify comment 1001-2",
              "created_at": "2022-10-01T12:00:15.000Z",
              "updated_at": "2022-10-01T12:00:29.000Z",
              "deleted_at": null,
              "userHasManyComments": null,
              "commentHasManyComments": [
                {
                  "id": 5,
                  "text": "comment 저장 테스트 1001 익명",
                  "updated_at": "2022-10-01T12:13:19.000Z",
                  "userHasManyComments": {
                    "id": 3,
                    "nickname": "test100101",
                    "profile_image_url": null
                  }
                },
                {
                  "id": 3,
                  "text": "comment 저장 테스트 1001 익명",
                  "updated_at": "2022-10-01T12:10:14.000Z",
                  "userHasManyComments": null
                }
              ]
            }
          ]
        message:
          type: string
          example: 'Comments of post 1'
    UpdateComment:
      type: object
      properties:
        comment_id:
          type: number
          example: 1
        text:
          type: string
          example: 'sample modified comment'
        anonymity_yn:
          type: string
          example: 'n'
    UpdateCommentRes:
      type: object
      properties:
        data:
          type: object
          example: {
            "id": 2,
            "original_comment_id": null,
            "anonymity_yn": "n",
            "updated_at": "2022-10-01T12:00:29.000Z"
          }
        message:
          type: string
          example: 'Modified the comment'
    DeleteCommentRes:
      type: object
      properties:
        message:
          type: string
          example: 'Soft deleted the comment'
    LikeOrNot:
      type: object
      properties:
        user_id:
          type: number
          example: 1
        post_id:
          type: number
          example: 2
    LikeOrNotRes:
      properties:
        message:
          type: string
          example: 'Liked(Canceled the like of) the post 2'